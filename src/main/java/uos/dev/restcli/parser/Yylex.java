// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: lexer.flex

package uos.dev.restcli.parser;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Yylex {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;
  private static final String ZZ_NL = System.getProperty("line.separator");

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int S_REQUEST_SEPARATOR = 2;
  public static final int S_REQUEST_LINE = 4;
  public static final int S_HEADER = 6;
  public static final int S_BODY = 8;
  public static final int S_SCRIPT_HANDLER = 10;
  public static final int S_SCRIPT_REFERENCE = 12;
  public static final int S_MULTIPLE_PART_HEADER = 14;
  public static final int S_MULTIPLE_PART_BODY = 16;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  5,  5,  5,  5, 
     5, 5
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\2\22\0\1\1"+
    "\2\0\1\5\12\0\1\6\1\7\12\10\1\11\1\0"+
    "\1\12\1\0\1\13\2\0\1\14\1\0\1\15\1\16"+
    "\1\17\1\0\1\20\1\21\1\22\2\0\1\23\1\0"+
    "\1\24\1\25\1\26\1\0\1\27\1\30\1\31\1\32"+
    "\46\0\1\33\10\0\1\3\32\0\1\34\u01df\0\1\34"+
    "\177\0\13\34\35\0\2\3\5\0\1\34\57\0\1\34"+
    "\240\0\1\34\377\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\1\1\1\2\4\1\1\3\1\4\1\5\10\3"+
    "\1\6\1\7\2\10\1\0\1\10\3\7\2\11\1\12"+
    "\1\0\3\11\1\12\15\0\1\13\1\0\1\13\1\0"+
    "\11\3\1\14\3\0\1\14\1\13\1\0\2\15\16\0"+
    "\10\3\1\0\2\16\2\17\7\0\2\20\1\0\1\20"+
    "\2\3\1\21\3\3\1\14\1\20\6\0\2\3\3\0"+
    "\1\3\3\0\1\22";

  private static int [] zzUnpackAction() {
    int [] result = new int[139];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\35\0\72\0\127\0\164\0\221\0\256\0\313"+
    "\0\350\0\u0105\0\u0122\0\u013f\0\u015c\0\u0179\0\u0196\0\u01b3"+
    "\0\350\0\u01d0\0\u01ed\0\u020a\0\u0227\0\u0244\0\u0261\0\u027e"+
    "\0\u029b\0\350\0\u02b8\0\u02d5\0\u02f2\0\u02b8\0\u030f\0\u032c"+
    "\0\u0349\0\u0366\0\u0383\0\u03a0\0\350\0\u0383\0\u015c\0\u03bd"+
    "\0\u03da\0\u0383\0\u0122\0\u03f7\0\u0414\0\u0431\0\u044e\0\u046b"+
    "\0\u0488\0\u04a5\0\313\0\u04c2\0\u013f\0\u04df\0\u0179\0\350"+
    "\0\u04fc\0\u04df\0\u0519\0\u0536\0\u0553\0\u0570\0\u058d\0\u05aa"+
    "\0\u05c7\0\u05e4\0\u0601\0\u061e\0\350\0\u063b\0\u0349\0\u0658"+
    "\0\u04df\0\u063b\0\u0366\0\350\0\u0366\0\u03a0\0\u03bd\0\u0675"+
    "\0\u0692\0\u06af\0\u06cc\0\u06e9\0\u0706\0\u0723\0\u0740\0\u075d"+
    "\0\u077a\0\u0797\0\u07b4\0\u07d1\0\u07ee\0\u080b\0\u0828\0\u0845"+
    "\0\u0862\0\u087f\0\u089c\0\u08b9\0\350\0\u0675\0\350\0\u0692"+
    "\0\u08d6\0\u08f3\0\350\0\u0910\0\u092d\0\u094a\0\u0967\0\350"+
    "\0\u0797\0\u0984\0\u07d1\0\u09a1\0\u09be\0\u09db\0\u09f8\0\u0a15"+
    "\0\u0a32\0\u0797\0\u08b9\0\u0a4f\0\u0a6c\0\u0a89\0\u0aa6\0\u0ac3"+
    "\0\u0ae0\0\u0afd\0\u0b1a\0\u0b37\0\u0b54\0\u0b71\0\u0b8e\0\u0bab"+
    "\0\u0bc8\0\u0be5\0\u0be5";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[139];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\2\12\1\0\1\12\1\13\25\11\1\12\2\11"+
    "\1\14\3\0\1\15\1\11\1\16\25\11\1\17\1\20"+
    "\1\21\2\17\1\22\7\17\1\23\1\24\1\17\1\25"+
    "\1\26\3\17\1\27\1\30\2\17\1\31\2\17\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\33\1\41"+
    "\1\33\1\42\21\33\1\37\1\33\1\43\1\44\1\45"+
    "\2\46\1\47\1\43\1\50\2\43\1\51\20\43\1\52"+
    "\1\43\5\0\1\53\44\0\1\54\1\55\1\0\1\56"+
    "\1\57\3\0\1\60\1\61\2\0\1\62\4\0\1\63"+
    "\71\0\2\12\1\0\1\12\26\0\1\12\6\0\1\64"+
    "\30\0\1\65\3\0\1\66\1\0\1\67\25\0\2\66"+
    "\1\70\2\66\1\71\25\66\1\72\1\66\7\0\1\66"+
    "\25\0\1\17\2\0\31\17\2\0\1\20\17\0\1\73"+
    "\13\0\1\17\2\0\2\17\1\74\26\17\1\0\1\17"+
    "\2\0\22\17\1\75\6\17\1\0\1\17\2\0\14\17"+
    "\1\76\14\17\1\0\1\17\2\0\14\17\1\77\14\17"+
    "\1\0\1\17\2\0\14\17\1\100\14\17\1\0\1\17"+
    "\2\0\23\17\1\101\5\17\1\0\1\17\2\0\11\17"+
    "\1\102\10\17\1\103\4\17\1\77\1\17\1\0\1\17"+
    "\2\0\24\17\1\104\4\17\1\0\2\36\1\0\6\36"+
    "\1\105\24\36\1\34\1\35\1\36\1\37\1\106\1\36"+
    "\1\107\1\36\1\105\21\36\1\37\1\36\1\0\2\35"+
    "\1\0\1\35\26\0\1\35\1\0\1\36\1\37\1\35"+
    "\1\36\1\37\4\36\1\105\21\36\1\37\1\36\2\106"+
    "\1\70\2\106\1\110\3\106\1\111\21\106\1\112\1\106"+
    "\2\36\1\0\4\36\1\106\1\36\1\105\23\36\2\113"+
    "\1\114\30\113\1\115\1\113\2\46\1\45\30\46\1\52"+
    "\2\46\1\116\1\45\2\46\1\66\1\46\1\117\23\46"+
    "\1\52\3\46\1\45\4\46\1\66\23\46\1\52\2\46"+
    "\1\120\1\45\10\46\1\121\17\46\1\52\1\46\25\0"+
    "\1\122\26\0\1\123\34\0\1\124\34\0\1\125\43\0"+
    "\1\126\22\0\1\127\10\0\1\130\4\0\1\124\31\0"+
    "\1\131\12\0\1\132\27\0\2\66\1\70\30\66\1\72"+
    "\3\66\1\70\2\66\1\132\25\66\1\72\1\66\31\0"+
    "\1\133\3\0\1\17\2\0\2\17\1\134\26\17\1\0"+
    "\1\17\2\0\21\17\1\135\7\17\1\0\1\17\2\0"+
    "\20\17\1\136\10\17\1\0\1\17\2\0\26\17\1\137"+
    "\2\17\1\0\1\17\2\0\11\17\1\140\17\17\1\0"+
    "\1\17\2\0\26\17\1\141\2\17\1\0\1\17\2\0"+
    "\26\17\1\142\2\17\1\0\1\17\2\0\25\17\1\77"+
    "\3\17\1\0\1\17\2\0\11\17\1\143\17\17\1\0"+
    "\2\106\1\70\6\106\1\111\21\106\1\112\3\106\1\70"+
    "\2\106\1\144\3\106\1\111\21\106\1\112\1\106\2\120"+
    "\1\145\30\120\1\146\1\120\2\121\1\147\30\121\1\150"+
    "\1\121\24\0\1\151\33\0\1\152\42\0\1\153\17\0"+
    "\1\154\51\0\1\155\34\0\1\156\33\0\1\124\20\0"+
    "\1\157\20\0\2\132\1\160\30\132\1\161\1\132\31\0"+
    "\1\162\3\0\1\134\1\132\1\160\30\134\1\163\1\132"+
    "\1\17\2\0\21\17\1\164\7\17\1\0\1\17\2\0"+
    "\14\17\1\165\14\17\1\0\1\17\1\166\1\0\31\17"+
    "\1\0\1\17\2\0\13\17\1\137\15\17\1\0\1\17"+
    "\2\0\17\17\1\167\11\17\1\0\1\17\2\0\12\17"+
    "\1\170\16\17\1\0\1\17\2\0\12\17\1\171\16\17"+
    "\1\0\2\144\1\160\6\144\1\172\21\144\1\173\1\144"+
    "\24\0\1\174\27\0\1\175\33\0\1\153\40\0\1\176"+
    "\27\0\1\177\34\0\1\200\45\0\1\201\6\0\1\17"+
    "\2\0\14\17\1\202\14\17\1\0\1\17\2\0\26\17"+
    "\1\171\2\17\2\0\1\166\33\0\1\17\2\0\22\17"+
    "\1\203\6\17\1\0\1\17\2\0\16\17\1\137\12\17"+
    "\1\0\1\17\2\0\14\17\1\137\14\17\20\0\1\204"+
    "\46\0\1\200\30\0\1\205\30\0\1\153\32\0\1\153"+
    "\24\0\1\206\25\0\1\17\2\0\12\17\1\77\16\17"+
    "\1\0\1\17\2\0\21\17\1\207\7\17\16\0\1\124"+
    "\43\0\1\210\20\0\1\211\24\0\1\17\2\0\25\17"+
    "\1\137\3\17\31\0\1\153\12\0\1\212\1\0\1\211"+
    "\34\0\1\213\24\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3074];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\1\11\7\1\1\11\10\1\1\11\3\1\1\0"+
    "\6\1\1\11\1\0\4\1\10\0\1\1\4\0\1\11"+
    "\1\0\1\1\1\0\11\1\1\11\3\0\2\1\1\0"+
    "\1\11\1\1\16\0\10\1\1\0\1\11\1\1\1\11"+
    "\1\1\2\0\1\11\4\0\1\11\1\1\1\0\11\1"+
    "\6\0\2\1\3\0\1\1\3\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[139];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
private boolean hasRequestTarget = false;
private boolean isMultiplePart = false;
private int previousState = -1;

public int getPreviousState() {
  return previousState;
}

private void switchState(int newState) {
  previousState = yystate();
  yybegin(newState);
}

private void reset() {
    hasRequestTarget = false;
    isMultiplePart = false;
}

public boolean isMultiplePart() {
    return isMultiplePart;
}

private void throwError() throws ParserException {
    throw new ParserException("Error while parsing: " + yytext());
}

private Yytoken createTokenNormal(int type) {
  return new Yytoken(type, yytext());
}

private Yytoken createTokenTrimmed(int type) {
  return new Yytoken(type, yytext().trim());
}

private Yytoken createFieldValueToken() {
  String fieldValueWithColonPrefix = yytext().trim();
  String fieldValue = fieldValueWithColonPrefix.replaceFirst(": *", "");
  return new Yytoken(Yytoken.TYPE_FIELD_VALUE, fieldValue);
}

private static final void T(String text) {
  System.out.println(text);
}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Yylex(java.io.Reader in) {
    this.zzReader = in;
  }


  private static String zzToPrintable(String str) {
    StringBuilder builder = new StringBuilder();
    for (int n = 0 ; n < str.length() ; ) {
      int ch = str.codePointAt(n);
      int charCount = Character.charCount(ch);
      n += charCount;
      if (ch > 31 && ch < 127) {
        builder.append((char)ch);
      } else if (charCount == 1) {
        builder.append(String.format("\\u%04X", ch));
      } else {
        builder.append(String.format("\\U%06X", ch));
      }
    }
    return builder.toString();
  }
  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Yytoken yylex() throws java.io.IOException, ParserException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [114] { yypushback(1); switchState(S_REQUEST_LINE); }");
            { yypushback(1); switchState(S_REQUEST_LINE);
            }
            // fall through
          case 19: break;
          case 2:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [113] { T(\"Ignore any space in YYINITIAL\"); }");
            { T("Ignore any space in YYINITIAL");
            }
            // fall through
          case 20: break;
          case 3:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [125] { hasRequestTarget = true; return createTokenTrimmed(Yytoken.TYPE_REQUEST_TARGET); }");
            { hasRequestTarget = true; return createTokenTrimmed(Yytoken.TYPE_REQUEST_TARGET);
            }
            // fall through
          case 21: break;
          case 4:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [123] { T(\"Ignore {WhiteSpace}+ in S_REQUEST_LINE\"); }");
            { T("Ignore {WhiteSpace}+ in S_REQUEST_LINE");
            }
            // fall through
          case 22: break;
          case 5:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [127] { if (!hasRequestTarget) throwError(); switchState(S_HEADER); }");
            { if (!hasRequestTarget) throwError(); switchState(S_HEADER);
            }
            // fall through
          case 23: break;
          case 6:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [128] { throwError(); }");
            { throwError();
            }
            // fall through
          case 24: break;
          case 7:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [136] { T(\"State S_HEADER fallback for: \" + yytext());"+ZZ_NL+"                                             yypushback(1);"+ZZ_NL+"                                             switchState(YYINITIAL); }");
            { T("State S_HEADER fallback for: " + yytext());
                                             yypushback(1);
                                             switchState(YYINITIAL);
            }
            // fall through
          case 25: break;
          case 8:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [135] { switchState(S_BODY); }");
            { switchState(S_BODY);
            }
            // fall through
          case 26: break;
          case 9:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [147] { T(\"State S_BODY falback for: \" + yytext());"+ZZ_NL+"                                             yypushback(1);"+ZZ_NL+"                                             switchState(YYINITIAL); }");
            { T("State S_BODY falback for: " + yytext());
                                             yypushback(1);
                                             switchState(YYINITIAL);
            }
            // fall through
          case 27: break;
          case 10:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [145] { return createTokenNormal(Yytoken.TYPE_BODY_MESSAGE); }");
            { return createTokenNormal(Yytoken.TYPE_BODY_MESSAGE);
            }
            // fall through
          case 28: break;
          case 11:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [118] { return createTokenNormal(Yytoken.TYPE_COMMENT); }");
            { return createTokenNormal(Yytoken.TYPE_COMMENT);
            }
            // fall through
          case 29: break;
          case 12:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [132] { return createTokenTrimmed(Yytoken.TYPE_FIELD_NAME); }");
            { return createTokenTrimmed(Yytoken.TYPE_FIELD_NAME);
            }
            // fall through
          case 30: break;
          case 13:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [133] { return createFieldValueToken(); }");
            { return createFieldValueToken();
            }
            // fall through
          case 31: break;
          case 14:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [144] { return createTokenNormal(Yytoken.TYPE_VALUE_FILE_REF); }");
            { return createTokenNormal(Yytoken.TYPE_VALUE_FILE_REF);
            }
            // fall through
          case 32: break;
          case 15:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [142] { T(\"State S_BODY but got <>.* => fallback to response reference\"); }");
            { T("State S_BODY but got <>.* => fallback to response reference");
            }
            // fall through
          case 33: break;
          case 16:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [107] { reset();"+ZZ_NL+"                                             switchState(S_REQUEST_SEPARATOR);"+ZZ_NL+"                                             return createTokenTrimmed(Yytoken.TYPE_SEPARATOR); }");
            { reset();
                                             switchState(S_REQUEST_SEPARATOR);
                                             return createTokenTrimmed(Yytoken.TYPE_SEPARATOR);
            }
            // fall through
          case 34: break;
          case 17:
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 6;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length) {
                zzFin = new boolean[zzBufferL.length+1];
              }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos, zzMarkedPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              }
              if (zzFState != -1) {
                zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1);
              }
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 7;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos, zzStartRead);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [124] { return createTokenTrimmed(Yytoken.TYPE_REQUEST_METHOD); }");
            { return createTokenTrimmed(Yytoken.TYPE_REQUEST_METHOD);
            }
            // fall through
          case 35: break;
          case 18:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [126] { return createTokenTrimmed(Yytoken.TYPE_REQUEST_HTTP_VERSION); }");
            { return createTokenTrimmed(Yytoken.TYPE_REQUEST_HTTP_VERSION);
            }
            // fall through
          case 36: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java Yylex [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Yylex scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Yylex(reader);
          do {
            System.out.println(scanner.yylex());
          } while (!scanner.zzAtEOF);

        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
