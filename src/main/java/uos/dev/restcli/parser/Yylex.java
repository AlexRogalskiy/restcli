// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: lexer.flex

package uos.dev.restcli.parser;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Yylex {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;
  private static final String ZZ_NL = System.getProperty("line.separator");

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int S_REQUEST_SEPARATOR = 2;
  public static final int S_REQUEST_LINE = 4;
  public static final int S_HEADER = 6;
  public static final int S_BODY = 8;
  public static final int S_MULTILE_PART = 10;
  public static final int S_SCRIPT_HANDLER = 12;
  public static final int S_SCRIPT_REFERENCE = 14;
  public static final int S_MULTIPLE_PART_HEADER = 16;
  public static final int S_MULTIPLE_PART_BODY = 18;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9, 9
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\2\22\0\1\1"+
    "\2\0\1\5\1\0\1\6\7\0\1\7\1\10\1\11"+
    "\12\12\1\13\1\0\1\14\1\0\1\15\2\0\1\16"+
    "\1\0\1\17\1\20\1\21\1\0\1\22\1\23\1\24"+
    "\2\0\1\25\1\0\1\26\1\27\1\30\1\0\1\31"+
    "\1\32\1\33\1\34\45\0\1\35\1\36\1\37\7\0"+
    "\1\3\32\0\1\40\u01df\0\1\40\177\0\13\40\35\0"+
    "\2\3\5\0\1\40\57\0\1\40\240\0\1\40\377\0"+
    "\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\5\0\1\2\1\3\4\2\1\4\1\5"+
    "\1\6\10\4\1\7\1\10\2\11\1\0\1\11\3\10"+
    "\2\12\1\13\1\0\3\12\1\13\5\12\1\1\1\0"+
    "\3\1\3\14\1\7\2\15\1\0\2\7\2\16\1\17"+
    "\1\0\4\16\1\17\14\0\1\20\1\0\1\20\1\0"+
    "\11\4\1\21\3\0\1\21\1\20\1\0\2\22\6\0"+
    "\1\1\1\23\1\1\1\0\1\24\15\0\10\4\1\0"+
    "\2\25\2\26\2\27\2\30\2\1\1\31\1\0\1\1"+
    "\1\31\11\0\2\32\1\0\1\32\2\4\1\33\3\4"+
    "\1\21\2\32\1\0\1\32\1\34\2\35\1\24\1\32"+
    "\6\0\2\4\3\0\1\4\3\0\1\36";

  private static int [] zzUnpackAction() {
    int [] result = new int[200];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\41\0\102\0\143\0\204\0\245\0\306\0\347"+
    "\0\u0108\0\u0129\0\u014a\0\u016b\0\u018c\0\u01ad\0\u01ce\0\u01ef"+
    "\0\u0210\0\u0231\0\u0252\0\u0273\0\u018c\0\u0294\0\u02b5\0\u02d6"+
    "\0\u02f7\0\u0318\0\u0339\0\u035a\0\u037b\0\u018c\0\u039c\0\u03bd"+
    "\0\u03de\0\u039c\0\u03ff\0\u0420\0\u0441\0\u0462\0\u0483\0\u04a4"+
    "\0\u018c\0\u0483\0\u0210\0\u04c5\0\u04e6\0\u0483\0\u018c\0\u01ef"+
    "\0\u0507\0\u0231\0\u0528\0\u0549\0\u0549\0\u056a\0\u058b\0\u05ac"+
    "\0\u018c\0\u01ce\0\u05cd\0\u05ee\0\u060f\0\u0630\0\u05ee\0\u0651"+
    "\0\u0462\0\u0672\0\u0693\0\u018c\0\u0672\0\u0210\0\u06b4\0\u06d5"+
    "\0\u06f6\0\u0672\0\u0717\0\u0738\0\u0759\0\u077a\0\u079b\0\u07bc"+
    "\0\u07dd\0\u016b\0\u07fe\0\u01ef\0\u081f\0\u0231\0\u018c\0\u0840"+
    "\0\u081f\0\u0861\0\u0882\0\u08a3\0\u08c4\0\u08e5\0\u0906\0\u0927"+
    "\0\u0948\0\u0969\0\u098a\0\u018c\0\u09ab\0\u0441\0\u09cc\0\u081f"+
    "\0\u09ab\0\u0462\0\u018c\0\u0462\0\u04a4\0\u04c5\0\u09ed\0\u0a0e"+
    "\0\u0a2f\0\u0a50\0\u0a71\0\u0549\0\u0a92\0\u0ab3\0\u018c\0\u0ad4"+
    "\0\u0693\0\u06d5\0\u0af5\0\u0b16\0\u0b37\0\u0b58\0\u0b79\0\u0b9a"+
    "\0\u0bbb\0\u0bdc\0\u0bfd\0\u0c1e\0\u0c3f\0\u0c60\0\u0c81\0\u0ca2"+
    "\0\u0cc3\0\u0ce4\0\u0d05\0\u0d26\0\u0d47\0\u018c\0\u09ed\0\u018c"+
    "\0\u0a0e\0\u018c\0\u0a2f\0\u018c\0\u0a50\0\u0d68\0\u0d89\0\u0549"+
    "\0\u0d89\0\u0daa\0\u0d89\0\u0dcb\0\u0dec\0\u0e0d\0\u0e2e\0\u018c"+
    "\0\u0e4f\0\u0e70\0\u0e91\0\u0eb2\0\u018c\0\u0bfd\0\u0ed3\0\u0c3f"+
    "\0\u0ef4\0\u0f15\0\u0f36\0\u0f57\0\u0f78\0\u0f99\0\u0bfd\0\u0d47"+
    "\0\u0549\0\u0d68\0\u0d68\0\u0d89\0\u018c\0\u0dcb\0\u0bfd\0\u0dec"+
    "\0\u0fba\0\u0fdb\0\u0ffc\0\u101d\0\u103e\0\u105f\0\u1080\0\u10a1"+
    "\0\u10c2\0\u10e3\0\u1104\0\u1125\0\u1146\0\u1167\0\u1188\0\u1188";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[200];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\15\2\16\1\0\1\16\1\17\30\15\1\16\3\15"+
    "\1\20\3\0\1\21\3\15\1\22\27\15\1\23\1\24"+
    "\1\25\2\23\1\26\11\23\1\27\1\30\1\23\1\31"+
    "\1\32\3\23\1\33\1\34\2\23\1\35\4\23\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\3\37\1\45"+
    "\1\37\1\46\22\37\1\43\2\37\1\47\1\50\1\51"+
    "\2\52\1\53\3\47\1\54\2\47\1\55\21\47\1\56"+
    "\2\47\1\57\1\60\3\0\1\53\1\57\1\61\1\57"+
    "\1\62\2\57\1\63\24\57\2\64\3\65\1\66\1\67"+
    "\6\64\1\70\23\64\2\71\3\0\1\72\6\71\1\73"+
    "\24\71\1\74\1\75\1\76\1\77\1\75\1\100\5\74"+
    "\1\101\22\74\1\75\2\74\1\102\1\103\1\104\2\105"+
    "\1\106\1\102\1\107\1\102\1\110\2\102\1\111\21\102"+
    "\1\112\2\102\17\0\1\113\1\114\1\0\1\115\1\116"+
    "\3\0\1\117\1\120\2\0\1\121\6\0\1\122\101\0"+
    "\2\16\1\0\1\16\31\0\1\16\7\0\1\123\34\0"+
    "\1\124\3\0\1\125\3\0\1\126\27\0\2\125\1\127"+
    "\2\125\1\130\30\125\1\131\2\125\11\0\1\125\27\0"+
    "\1\23\2\0\35\23\2\0\1\24\21\0\1\132\15\0"+
    "\1\23\2\0\2\23\1\133\32\23\1\0\1\23\2\0"+
    "\24\23\1\134\10\23\1\0\1\23\2\0\16\23\1\135"+
    "\16\23\1\0\1\23\2\0\16\23\1\136\16\23\1\0"+
    "\1\23\2\0\16\23\1\137\16\23\1\0\1\23\2\0"+
    "\25\23\1\140\7\23\1\0\1\23\2\0\13\23\1\141"+
    "\10\23\1\142\4\23\1\136\3\23\1\0\1\23\2\0"+
    "\26\23\1\143\6\23\1\0\2\42\1\0\10\42\1\144"+
    "\26\42\1\40\1\41\1\42\1\43\1\145\3\42\1\146"+
    "\1\42\1\144\22\42\1\43\2\42\1\0\2\41\1\0"+
    "\1\41\31\0\1\41\2\0\1\42\1\43\1\41\1\42"+
    "\1\43\6\42\1\144\22\42\1\43\2\42\2\145\1\127"+
    "\2\145\1\147\5\145\1\150\22\145\1\151\2\145\2\42"+
    "\1\0\6\42\1\145\1\42\1\144\25\42\2\152\1\153"+
    "\33\152\1\154\2\152\2\52\1\51\33\52\1\56\3\52"+
    "\1\155\1\51\2\52\1\125\3\52\1\156\24\52\1\56"+
    "\4\52\1\51\6\52\1\125\24\52\1\56\3\52\1\157"+
    "\1\51\12\52\1\160\20\52\1\56\2\52\7\0\1\161"+
    "\46\0\1\162\23\0\2\64\3\65\36\64\3\65\1\163"+
    "\35\64\3\65\32\64\1\164\2\64\1\165\3\65\34\64"+
    "\15\0\1\166\23\0\2\77\1\0\10\77\1\167\26\77"+
    "\1\75\1\76\1\77\1\75\6\77\1\167\22\77\1\75"+
    "\2\77\1\0\2\76\1\0\1\76\31\0\1\76\2\0"+
    "\2\77\1\0\2\77\1\170\5\77\1\167\25\77\2\105"+
    "\1\104\33\105\1\112\3\105\1\171\1\104\2\105\1\125"+
    "\3\105\1\172\24\105\1\112\4\105\1\104\4\105\1\161"+
    "\26\105\1\112\4\105\1\104\6\105\1\125\24\105\1\112"+
    "\4\105\1\104\12\105\1\160\20\105\1\112\2\105\27\0"+
    "\1\173\32\0\1\174\40\0\1\175\40\0\1\176\47\0"+
    "\1\177\26\0\1\200\10\0\1\201\4\0\1\175\35\0"+
    "\1\202\14\0\1\203\33\0\2\125\1\127\33\125\1\131"+
    "\4\125\1\127\2\125\1\203\30\125\1\131\2\125\33\0"+
    "\1\204\5\0\1\23\2\0\2\23\1\205\32\23\1\0"+
    "\1\23\2\0\23\23\1\206\11\23\1\0\1\23\2\0"+
    "\22\23\1\207\12\23\1\0\1\23\2\0\30\23\1\210"+
    "\4\23\1\0\1\23\2\0\13\23\1\211\21\23\1\0"+
    "\1\23\2\0\30\23\1\212\4\23\1\0\1\23\2\0"+
    "\30\23\1\213\4\23\1\0\1\23\2\0\27\23\1\136"+
    "\5\23\1\0\1\23\2\0\13\23\1\214\21\23\1\0"+
    "\2\145\1\127\10\145\1\150\22\145\1\151\4\145\1\127"+
    "\2\145\1\215\5\145\1\150\22\145\1\151\2\145\2\157"+
    "\1\216\33\157\1\217\2\157\2\160\1\220\33\160\1\221"+
    "\2\160\2\161\1\222\33\161\1\223\2\161\2\162\1\224"+
    "\33\162\1\225\2\162\2\64\3\65\1\226\33\64\1\227"+
    "\1\165\1\230\2\231\30\227\1\232\1\233\2\227\1\0"+
    "\1\234\37\0\2\77\1\0\2\77\1\235\5\77\1\167"+
    "\25\77\26\0\1\236\37\0\1\237\46\0\1\240\23\0"+
    "\1\241\55\0\1\242\40\0\1\243\37\0\1\175\24\0"+
    "\1\244\22\0\2\203\1\245\33\203\1\246\2\203\33\0"+
    "\1\247\5\0\1\205\1\203\1\245\33\205\1\250\1\205"+
    "\1\203\1\23\2\0\23\23\1\251\11\23\1\0\1\23"+
    "\2\0\16\23\1\252\16\23\1\0\1\23\1\253\1\0"+
    "\35\23\1\0\1\23\2\0\15\23\1\210\17\23\1\0"+
    "\1\23\2\0\21\23\1\254\13\23\1\0\1\23\2\0"+
    "\14\23\1\255\20\23\1\0\1\23\2\0\14\23\1\256"+
    "\20\23\1\0\2\215\1\245\10\215\1\257\22\215\1\260"+
    "\2\215\2\226\1\261\2\262\31\226\1\263\2\226\2\227"+
    "\1\230\2\231\31\227\1\233\4\227\1\230\2\231\1\227"+
    "\1\264\27\227\1\233\2\227\2\234\1\265\33\234\1\266"+
    "\2\234\2\235\1\245\10\235\1\267\22\235\1\270\2\235"+
    "\26\0\1\271\33\0\1\272\37\0\1\240\44\0\1\273"+
    "\33\0\1\274\40\0\1\275\51\0\1\276\10\0\1\23"+
    "\2\0\16\23\1\277\16\23\1\0\1\23\2\0\30\23"+
    "\1\256\4\23\2\0\1\253\37\0\1\23\2\0\24\23"+
    "\1\300\10\23\1\0\1\23\2\0\20\23\1\210\14\23"+
    "\1\0\1\23\2\0\16\23\1\210\16\23\22\0\1\301"+
    "\52\0\1\275\34\0\1\302\34\0\1\240\36\0\1\240"+
    "\30\0\1\303\27\0\1\23\2\0\14\23\1\136\20\23"+
    "\1\0\1\23\2\0\23\23\1\304\11\23\20\0\1\175"+
    "\47\0\1\305\24\0\1\306\26\0\1\23\2\0\27\23"+
    "\1\210\5\23\33\0\1\240\16\0\1\307\1\0\1\306"+
    "\40\0\1\310\26\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4521];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\1\5\0\1\11\7\1\1\11\10\1\1\11"+
    "\3\1\1\0\6\1\1\11\1\0\4\1\1\11\5\1"+
    "\1\0\3\1\1\11\5\1\1\0\4\1\1\11\1\0"+
    "\5\1\7\0\1\1\4\0\1\11\1\0\1\1\1\0"+
    "\11\1\1\11\3\0\2\1\1\0\1\11\1\1\6\0"+
    "\3\1\1\0\1\11\15\0\10\1\1\0\1\11\1\1"+
    "\1\11\1\1\1\11\1\1\1\11\4\1\1\0\2\1"+
    "\4\0\1\11\4\0\1\11\1\1\1\0\12\1\1\0"+
    "\2\1\1\11\3\1\6\0\2\1\3\0\1\1\3\0"+
    "\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[200];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
private boolean hasRequestTarget = false;
private boolean isMultiplePart = false;
private int previousState = -1;
private String currentFieldName = null;
private boolean isNewPartRequired = false;

public int getPreviousState() {
  return previousState;
}

private void switchState(int newState) {
  previousState = yystate();
  yybegin(newState);
}

private void reset() {
    hasRequestTarget = false;
    isMultiplePart = false;
    currentFieldName = null;
    isNewPartRequired = false;
}

public boolean isMultiplePart() {
    return isMultiplePart;
}

public boolean isNewPartRequired() {
    return isNewPartRequired;
}

public void resetNewPartRequired() {
    isNewPartRequired = false;
}

private void throwError() throws ParserException {
    throw new ParserException("Error while parsing: " + yytext());
}

private Yytoken createTokenNormal(int type) {
  return new Yytoken(type, yytext());
}

private Yytoken createTokenTrimmed(int type) {
  return new Yytoken(type, yytext().trim());
}

private Yytoken createAndSaveFieldNameToken(int type) {
  String fieldName = yytext().trim();
  currentFieldName = fieldName;
  return new Yytoken(type, fieldName);
}

private Yytoken createFieldValueToken() {
  String fieldValueWithColonPrefix = yytext().trim();
  String fieldValue = fieldValueWithColonPrefix.replaceFirst(": *", "");
  boolean isContentTypeHeader = "Content-Type".equalsIgnoreCase(currentFieldName);
  if (isContentTypeHeader && yystate() == S_HEADER) {
    isMultiplePart = fieldValue.toLowerCase().contains("multipart/form-data;");
  }
  return new Yytoken(Yytoken.TYPE_FIELD_VALUE, fieldValue);
}

private static final void T(String text) {
  System.out.println(text);
}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Yylex(java.io.Reader in) {
    this.zzReader = in;
  }


  private static String zzToPrintable(String str) {
    StringBuilder builder = new StringBuilder();
    for (int n = 0 ; n < str.length() ; ) {
      int ch = str.codePointAt(n);
      int charCount = Character.charCount(ch);
      n += charCount;
      if (ch > 31 && ch < 127) {
        builder.append((char)ch);
      } else if (charCount == 1) {
        builder.append(String.format("\\u%04X", ch));
      } else {
        builder.append(String.format("\\U%06X", ch));
      }
    }
    return builder.toString();
  }
  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Yytoken yylex() throws java.io.IOException, ParserException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [206] { return new Yytoken(Yytoken.TYPE_HANDLER_SCRIPT, yytext()); }");
            { return new Yytoken(Yytoken.TYPE_HANDLER_SCRIPT, yytext());
            }
            // fall through
          case 31: break;
          case 2:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [136] { yypushback(1); switchState(S_REQUEST_LINE); }");
            { yypushback(1); switchState(S_REQUEST_LINE);
            }
            // fall through
          case 32: break;
          case 3:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [135] { T(\"Ignore any space in YYINITIAL\"); }");
            { T("Ignore any space in YYINITIAL");
            }
            // fall through
          case 33: break;
          case 4:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [147] { hasRequestTarget = true; return createTokenTrimmed(Yytoken.TYPE_REQUEST_TARGET); }");
            { hasRequestTarget = true; return createTokenTrimmed(Yytoken.TYPE_REQUEST_TARGET);
            }
            // fall through
          case 34: break;
          case 5:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [145] { T(\"Ignore {WhiteSpace}+ in S_REQUEST_LINE\"); }");
            { T("Ignore {WhiteSpace}+ in S_REQUEST_LINE");
            }
            // fall through
          case 35: break;
          case 6:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [149] { if (!hasRequestTarget) throwError(); switchState(S_HEADER); }");
            { if (!hasRequestTarget) throwError(); switchState(S_HEADER);
            }
            // fall through
          case 36: break;
          case 7:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [150] { throwError(); }");
            { throwError();
            }
            // fall through
          case 37: break;
          case 8:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [158] { T(\"State S_HEADER fallback for: \" + yytext());"+ZZ_NL+"                                             yypushback(1);"+ZZ_NL+"                                             switchState(YYINITIAL); }");
            { T("State S_HEADER fallback for: " + yytext());
                                             yypushback(1);
                                             switchState(YYINITIAL);
            }
            // fall through
          case 38: break;
          case 9:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [157] { if (isMultiplePart) switchState(S_MULTILE_PART); else switchState(S_BODY); }");
            { if (isMultiplePart) switchState(S_MULTILE_PART); else switchState(S_BODY);
            }
            // fall through
          case 39: break;
          case 10:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [168] { T(\"State S_BODY falback for: \" + yytext());"+ZZ_NL+"                                             yypushback(1);"+ZZ_NL+"                                             switchState(YYINITIAL); }");
            { T("State S_BODY falback for: " + yytext());
                                             yypushback(1);
                                             switchState(YYINITIAL);
            }
            // fall through
          case 40: break;
          case 11:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [167] { return createTokenNormal(Yytoken.TYPE_BODY_MESSAGE); }");
            { return createTokenNormal(Yytoken.TYPE_BODY_MESSAGE);
            }
            // fall through
          case 41: break;
          case 12:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [212] { yypushback(1); switchState(YYINITIAL); }");
            { yypushback(1); switchState(YYINITIAL);
            }
            // fall through
          case 42: break;
          case 13:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [187] { switchState(S_MULTIPLE_PART_BODY); }");
            { switchState(S_MULTIPLE_PART_BODY);
            }
            // fall through
          case 43: break;
          case 14:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [197] { yypushback(1); switchState(S_SCRIPT_HANDLER); }");
            { yypushback(1); switchState(S_SCRIPT_HANDLER);
            }
            // fall through
          case 44: break;
          case 15:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [195] { return new Yytoken(Yytoken.TYPE_BODY_MESSAGE, yytext()); }");
            { return new Yytoken(Yytoken.TYPE_BODY_MESSAGE, yytext());
            }
            // fall through
          case 45: break;
          case 16:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [140] { return createTokenNormal(Yytoken.TYPE_COMMENT); }");
            { return createTokenNormal(Yytoken.TYPE_COMMENT);
            }
            // fall through
          case 46: break;
          case 17:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [154] { return createAndSaveFieldNameToken(Yytoken.TYPE_FIELD_NAME); }");
            { return createAndSaveFieldNameToken(Yytoken.TYPE_FIELD_NAME);
            }
            // fall through
          case 47: break;
          case 18:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [155] { return createFieldValueToken(); }");
            { return createFieldValueToken();
            }
            // fall through
          case 48: break;
          case 19:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [205] { return new Yytoken(Yytoken.TYPE_CLOSE_SCRIPT_HANDLER); }");
            { return new Yytoken(Yytoken.TYPE_CLOSE_SCRIPT_HANDLER);
            }
            // fall through
          case 49: break;
          case 20:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [185] { return createTokenTrimmed(Yytoken.TYPE_FIELD_NAME); }");
            { return createTokenTrimmed(Yytoken.TYPE_FIELD_NAME);
            }
            // fall through
          case 50: break;
          case 21:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [166] { return createTokenNormal(Yytoken.TYPE_VALUE_FILE_REF); }");
            { return createTokenNormal(Yytoken.TYPE_VALUE_FILE_REF);
            }
            // fall through
          case 51: break;
          case 22:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [164] { T(\"State S_BODY but got <>.* => fallback to response reference\"); }");
            { T("State S_BODY but got <>.* => fallback to response reference");
            }
            // fall through
          case 52: break;
          case 23:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [177] { isNewPartRequired = true; switchState(S_MULTIPLE_PART_HEADER); }");
            { isNewPartRequired = true; switchState(S_MULTIPLE_PART_HEADER);
            }
            // fall through
          case 53: break;
          case 24:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [175] { T(\"State S_BODY_MULTILE_PART but got <>.* => fallback to response reference\"); }");
            { T("State S_BODY_MULTILE_PART but got <>.* => fallback to response reference");
            }
            // fall through
          case 54: break;
          case 25:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [201] { switchState(S_SCRIPT_REFERENCE);"+ZZ_NL+"                                             return new Yytoken(Yytoken.TYPE_VALUE_FILE_REF, yytext()); }");
            { switchState(S_SCRIPT_REFERENCE);
                                             return new Yytoken(Yytoken.TYPE_VALUE_FILE_REF, yytext());
            }
            // fall through
          case 55: break;
          case 26:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [129] { reset();"+ZZ_NL+"                                             switchState(S_REQUEST_SEPARATOR);"+ZZ_NL+"                                             return createTokenTrimmed(Yytoken.TYPE_SEPARATOR); }");
            { reset();
                                             switchState(S_REQUEST_SEPARATOR);
                                             return createTokenTrimmed(Yytoken.TYPE_SEPARATOR);
            }
            // fall through
          case 56: break;
          case 27:
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 10;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length) {
                zzFin = new boolean[zzBufferL.length+1];
              }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos, zzMarkedPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              }
              if (zzFState != -1) {
                zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1);
              }
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 11;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos, zzStartRead);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [146] { return createTokenTrimmed(Yytoken.TYPE_REQUEST_METHOD); }");
            { return createTokenTrimmed(Yytoken.TYPE_REQUEST_METHOD);
            }
            // fall through
          case 57: break;
          case 28:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [204] { return new Yytoken(Yytoken.TYPE_OPEN_SCRIPT_HANDLER); }");
            { return new Yytoken(Yytoken.TYPE_OPEN_SCRIPT_HANDLER);
            }
            // fall through
          case 58: break;
          case 29:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [211] { return new Yytoken(Yytoken.TYPE_VALUE_FILE_REF, yytext()); }");
            { return new Yytoken(Yytoken.TYPE_VALUE_FILE_REF, yytext());
            }
            // fall through
          case 59: break;
          case 30:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [148] { return createTokenTrimmed(Yytoken.TYPE_REQUEST_HTTP_VERSION); }");
            { return createTokenTrimmed(Yytoken.TYPE_REQUEST_HTTP_VERSION);
            }
            // fall through
          case 60: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java Yylex [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Yylex scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Yylex(reader);
          do {
            System.out.println(scanner.yylex());
          } while (!scanner.zzAtEOF);

        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
