// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: lexer.flex

package uos.dev.restcli.parser;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Yylex {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;
  private static final String ZZ_NL = System.getProperty("line.separator");

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int S_REQUEST_SEPARATOR = 2;
  public static final int S_REQUEST_LINE = 4;
  public static final int S_HEADER = 6;
  public static final int S_BODY = 8;
  public static final int S_MULTILE_PART = 10;
  public static final int S_SCRIPT_HANDLER = 12;
  public static final int S_RESPONSE_REFERENCE = 14;
  public static final int S_MULTIPLE_PART_HEADER = 16;
  public static final int S_MULTIPLE_PART_BODY = 18;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9, 9
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\u10cf\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\3\1\2\22\0\1\1"+
    "\2\0\1\4\1\0\1\5\7\0\1\6\1\7\1\10"+
    "\12\11\1\12\1\0\1\13\1\0\1\14\2\0\1\15"+
    "\1\0\1\16\1\17\1\20\1\0\1\21\1\22\1\23"+
    "\2\0\1\24\1\0\1\25\1\26\1\27\1\0\1\30"+
    "\1\31\1\32\1\33\45\0\1\34\1\35\1\36\u0482\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\14\0\1\1\1\2\1\1\1\3\2\4\2\3\1\5"+
    "\1\6\1\7\10\5\1\10\3\11\3\10\2\12\1\13"+
    "\4\12\1\13\5\12\3\14\3\15\1\16\2\17\2\16"+
    "\7\14\13\0\1\20\1\0\1\20\1\0\11\5\1\0"+
    "\1\21\3\0\1\21\1\20\1\0\2\22\14\0\1\23"+
    "\14\0\10\5\1\0\2\24\2\25\1\0\1\26\1\0"+
    "\1\26\2\27\2\30\1\0\1\31\1\0\1\31\3\0"+
    "\1\32\1\0\1\32\7\0\2\33\1\0\1\33\2\5"+
    "\1\34\3\5\1\21\1\33\1\0\2\35\1\23\1\33"+
    "\6\0\2\5\1\31\1\0\1\31\3\0\1\5\2\0"+
    "\1\36\2\0\1\36\1\0\1\37";

  private static int [] zzUnpackAction() {
    int [] result = new int[206];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\37\0\76\0\135\0\174\0\233\0\272\0\331"+
    "\0\370\0\u0117\0\u0136\0\u0155\0\u0174\0\u0193\0\u01b2\0\u0174"+
    "\0\u01d1\0\u01f0\0\u020f\0\u022e\0\u024d\0\u026c\0\u0174\0\u028b"+
    "\0\u02aa\0\u02c9\0\u02e8\0\u0307\0\u0326\0\u0345\0\u0364\0\u0383"+
    "\0\u03a2\0\u03c1\0\u03e0\0\u03ff\0\u041e\0\u043d\0\u045c\0\u047b"+
    "\0\u0174\0\u020f\0\u049a\0\u04b9\0\u04d8\0\u045c\0\u0174\0\u04f7"+
    "\0\u0516\0\u022e\0\u0535\0\u0174\0\u01b2\0\u0554\0\u0174\0\u01b2"+
    "\0\u0573\0\u0592\0\u05b1\0\u05d0\0\u05ef\0\u043d\0\u045c\0\u047b"+
    "\0\u020f\0\u060e\0\u049a\0\u04b9\0\u062d\0\u064c\0\u066b\0\u068a"+
    "\0\u06a9\0\u06c8\0\u06e7\0\u0706\0\u0155\0\u0725\0\u0744\0\u022e"+
    "\0\u0174\0\u0763\0\u0744\0\u0782\0\u07a1\0\u07c0\0\u07df\0\u07fe"+
    "\0\u081d\0\u083c\0\u085b\0\u087a\0\u0899\0\u0383\0\u0174\0\u08b8"+
    "\0\u041e\0\u08d7\0\u0744\0\u08b8\0\u043d\0\u0174\0\u043d\0\u045c"+
    "\0\u047b\0\u049a\0\u08f6\0\u0915\0\u0934\0\u04f7\0\u0953\0\u0972"+
    "\0\u0991\0\u09b0\0\u0592\0\u0174\0\u09cf\0\u09ee\0\u0a0d\0\u0a2c"+
    "\0\u0a4b\0\u0a6a\0\u0a89\0\u0aa8\0\u0ac7\0\u0ae6\0\u0b05\0\u0b24"+
    "\0\u0b43\0\u0b62\0\u0b81\0\u0ba0\0\u0bbf\0\u0bde\0\u0bfd\0\u0c1c"+
    "\0\u0c3b\0\u0174\0\u08f6\0\u0174\0\u0915\0\u0c5a\0\u0174\0\u0c79"+
    "\0\u0c5a\0\u0174\0\u0953\0\u0174\0\u0972\0\u0c98\0\u0174\0\u0cb7"+
    "\0\u0c98\0\u0cd6\0\u0cf5\0\u0d14\0\u0174\0\u0d33\0\u0d14\0\u0d52"+
    "\0\u0d71\0\u0174\0\u0d90\0\u0daf\0\u0dce\0\u0ded\0\u0174\0\u0b05"+
    "\0\u0e0c\0\u0b43\0\u0e2b\0\u0e4a\0\u0e69\0\u0e88\0\u0ea7\0\u0ec6"+
    "\0\u0b05\0\u0c3b\0\u0ee5\0\u0174\0\u0cd6\0\u0b05\0\u0cf5\0\u0f04"+
    "\0\u0f23\0\u0f42\0\u0f61\0\u0f80\0\u0f9f\0\u0fbe\0\u0fdd\0\u0ffc"+
    "\0\u101b\0\u0ee5\0\u103a\0\u1059\0\u1078\0\u1097\0\u0ffc\0\u10b6"+
    "\0\u0c98\0\u10d5\0\u10f4\0\u0174\0\u1113\0\u1113";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[206];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\15\3\16\1\17\30\15\1\16\1\15\1\20\1\21"+
    "\2\22\1\23\3\20\1\24\24\20\1\22\1\20\1\25"+
    "\1\26\1\27\1\25\1\30\11\25\1\31\1\32\1\25"+
    "\1\33\1\34\3\25\1\35\1\36\2\25\1\37\4\25"+
    "\1\40\1\41\1\42\1\43\1\44\3\40\1\45\1\40"+
    "\1\46\22\40\1\43\1\40\1\47\1\50\1\51\1\47"+
    "\1\52\3\47\1\53\2\47\1\54\1\55\20\47\1\56"+
    "\1\47\1\57\1\60\2\57\1\52\1\57\1\61\1\57"+
    "\1\62\2\57\1\63\23\57\4\64\1\65\7\64\1\66"+
    "\22\64\4\67\1\70\6\67\1\71\23\67\1\72\1\73"+
    "\1\74\1\73\1\75\5\72\1\76\22\72\1\73\1\72"+
    "\1\77\1\100\1\51\1\77\1\101\1\77\1\102\1\77"+
    "\1\103\2\77\1\104\1\105\20\77\1\56\1\77\16\0"+
    "\1\106\1\107\1\0\1\110\1\111\3\0\1\112\1\113"+
    "\2\0\1\114\5\0\1\115\75\0\3\16\31\0\1\16"+
    "\5\0\1\116\33\0\1\21\2\22\1\117\3\0\1\120"+
    "\24\0\1\22\2\0\3\22\31\0\1\22\1\0\2\117"+
    "\1\121\1\117\1\122\30\117\1\123\1\117\10\0\1\117"+
    "\26\0\1\25\2\0\34\25\1\0\1\26\20\0\1\124"+
    "\14\0\1\25\2\0\1\25\1\125\33\25\2\0\23\25"+
    "\1\126\11\25\2\0\15\25\1\127\17\25\2\0\15\25"+
    "\1\130\17\25\2\0\15\25\1\131\17\25\2\0\24\25"+
    "\1\132\10\25\2\0\12\25\1\133\10\25\1\134\4\25"+
    "\1\130\4\25\2\0\25\25\1\135\6\25\2\136\1\0"+
    "\7\136\1\137\25\136\1\41\1\42\1\43\1\140\3\136"+
    "\1\141\1\136\1\137\22\136\1\43\1\136\1\0\3\42"+
    "\31\0\1\42\1\0\1\136\1\43\1\42\1\43\6\136"+
    "\1\137\22\136\1\43\1\136\2\140\1\121\1\140\1\142"+
    "\5\140\1\143\22\140\1\144\1\140\2\136\1\0\5\136"+
    "\1\140\1\136\1\137\24\136\2\145\1\146\32\145\1\147"+
    "\1\145\2\150\1\51\32\150\1\56\2\150\1\151\1\51"+
    "\1\150\1\117\3\150\1\152\24\150\1\56\3\150\1\51"+
    "\5\150\1\117\24\150\1\56\2\150\1\153\1\51\11\150"+
    "\1\154\20\150\1\56\2\150\1\155\1\51\32\150\1\56"+
    "\1\150\1\0\1\156\2\0\1\117\3\0\1\120\34\0"+
    "\1\157\44\0\1\160\23\0\1\161\51\0\1\162\22\0"+
    "\2\163\1\0\7\163\1\164\25\163\1\73\1\74\1\73"+
    "\6\163\1\164\22\163\1\73\1\163\1\0\3\74\31\0"+
    "\1\74\1\0\2\163\1\0\1\163\1\165\5\163\1\164"+
    "\24\163\2\150\1\51\3\150\1\157\26\150\1\56\2\150"+
    "\1\166\1\51\32\150\1\56\1\150\26\0\1\167\30\0"+
    "\1\170\36\0\1\171\36\0\1\172\45\0\1\173\24\0"+
    "\1\174\10\0\1\175\4\0\1\171\33\0\1\176\12\0"+
    "\1\177\32\0\2\117\1\121\32\117\1\123\3\117\1\121"+
    "\1\117\1\177\30\117\1\123\1\117\32\0\1\200\4\0"+
    "\1\25\2\0\1\25\1\201\33\25\2\0\22\25\1\202"+
    "\12\25\2\0\21\25\1\203\13\25\2\0\27\25\1\204"+
    "\5\25\2\0\12\25\1\205\22\25\2\0\27\25\1\206"+
    "\5\25\2\0\27\25\1\207\5\25\2\0\26\25\1\130"+
    "\6\25\2\0\12\25\1\210\21\25\2\140\1\121\7\140"+
    "\1\143\22\140\1\144\3\140\1\121\1\140\1\211\5\140"+
    "\1\143\22\140\1\144\1\140\2\153\1\212\32\153\1\213"+
    "\1\153\2\154\1\214\32\154\1\215\1\154\1\216\1\155"+
    "\1\217\31\216\1\220\1\221\1\216\2\157\1\222\32\157"+
    "\1\223\1\157\2\160\1\224\32\160\1\225\1\160\1\226"+
    "\1\161\1\227\31\226\1\230\1\231\1\226\1\0\1\232"+
    "\35\0\2\163\1\0\1\163\1\233\5\163\1\164\24\163"+
    "\1\234\1\166\1\235\31\234\1\236\1\237\1\234\25\0"+
    "\1\240\35\0\1\241\44\0\1\242\21\0\1\243\53\0"+
    "\1\244\36\0\1\245\35\0\1\171\22\0\1\246\21\0"+
    "\2\177\1\247\32\177\1\250\1\177\32\0\1\251\4\0"+
    "\1\201\1\177\1\247\32\201\1\252\1\201\1\25\2\0"+
    "\22\25\1\253\12\25\2\0\15\25\1\254\17\25\1\255"+
    "\1\0\35\25\2\0\14\25\1\204\20\25\2\0\20\25"+
    "\1\256\14\25\2\0\13\25\1\257\21\25\2\0\13\25"+
    "\1\260\20\25\2\211\1\247\7\211\1\261\22\211\1\262"+
    "\1\211\2\216\1\217\32\216\1\221\3\216\1\217\2\216"+
    "\1\221\27\216\1\221\1\216\2\226\1\227\32\226\1\231"+
    "\3\226\1\227\2\226\1\263\27\226\1\231\1\226\2\232"+
    "\1\264\32\232\1\265\1\232\2\233\1\247\7\233\1\266"+
    "\22\233\1\267\1\233\2\234\1\235\32\234\1\237\3\234"+
    "\1\235\2\234\1\237\27\234\1\237\1\234\25\0\1\270"+
    "\31\0\1\271\35\0\1\242\42\0\1\272\31\0\1\273"+
    "\36\0\1\274\47\0\1\275\7\0\1\25\2\0\15\25"+
    "\1\276\17\25\2\0\27\25\1\260\4\25\1\0\1\255"+
    "\35\0\1\25\2\0\23\25\1\277\11\25\2\0\17\25"+
    "\1\204\15\25\2\0\15\25\1\204\16\25\2\263\1\300"+
    "\2\263\1\301\27\263\1\302\1\263\20\0\1\303\50\0"+
    "\1\274\32\0\1\304\32\0\1\242\34\0\1\242\26\0"+
    "\1\305\26\0\1\25\2\0\13\25\1\130\21\25\2\0"+
    "\22\25\1\306\11\25\5\307\1\310\31\307\2\263\1\300"+
    "\2\263\1\301\27\263\1\302\1\311\16\0\1\171\45\0"+
    "\1\312\22\0\1\313\25\0\1\25\2\0\26\25\1\204"+
    "\5\25\5\307\1\310\30\307\1\314\31\0\1\242\14\0"+
    "\1\315\1\0\1\313\36\0\1\316\25\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4402];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\14\0\1\11\2\1\1\11\6\1\1\11\21\1\1\11"+
    "\5\1\1\11\4\1\1\11\2\1\1\11\16\1\7\0"+
    "\1\1\3\0\1\11\1\0\1\1\1\0\11\1\1\0"+
    "\1\11\3\0\2\1\1\0\1\11\1\1\14\0\1\11"+
    "\14\0\10\1\1\0\1\11\1\1\1\11\1\1\1\0"+
    "\1\11\1\0\1\1\1\11\1\1\1\11\1\1\1\0"+
    "\1\11\1\0\1\1\3\0\1\11\1\0\1\1\2\0"+
    "\1\11\4\0\1\11\1\1\1\0\11\1\1\0\1\11"+
    "\3\1\6\0\3\1\1\0\1\1\3\0\1\1\2\0"+
    "\1\1\2\0\1\11\1\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[206];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
private boolean hasRequestTarget = false;
private boolean isMultiplePart = false;
private int previousState = -1;
private String currentFieldName = null;
private boolean isNewPartRequired = false;

public int getPreviousState() {
  return previousState;
}

private void switchState(int newState) {
  previousState = yystate();
  yybegin(newState);
}

private void reset() {
    hasRequestTarget = false;
    isMultiplePart = false;
    currentFieldName = null;
    isNewPartRequired = false;
}

public boolean isMultiplePart() {
    return isMultiplePart;
}

public boolean isNewPartRequired() {
    return isNewPartRequired;
}

public void resetNewPartRequired() {
    isNewPartRequired = false;
}

private void throwError() throws ParserException {
    throw new ParserException("Error while parsing: " + yytext());
}

private Yytoken createTokenNormal(TokenType type) {
  return new Yytoken(type, yytext());
}

private Yytoken createTokenTrimmed(TokenType type) {
  return new Yytoken(type, yytext().trim());
}

private Yytoken createTokenMessageLineFile() {
  String filePath = yytext().trim().substring(1).trim();
  return new Yytoken(TokenType.TYPE_BODY_FILE_REF, filePath);
}

private Yytoken createAndSaveFieldNameToken(TokenType type) {
  String fieldName = yytext().trim();
  currentFieldName = fieldName;
  return new Yytoken(type, fieldName);
}

private Yytoken createFieldValueToken() {
  String fieldValueWithColonPrefix = yytext().trim();
  String fieldValue = fieldValueWithColonPrefix.replaceFirst(": *", "");
  boolean isContentTypeHeader = "Content-Type".equalsIgnoreCase(currentFieldName);
  if (isContentTypeHeader && yystate() == S_HEADER) {
    isMultiplePart = fieldValue.toLowerCase().contains("multipart/form-data;");
  }
  return new Yytoken(TokenType.TYPE_FIELD_VALUE, fieldValue);
}

private static final void T(String text) {
  System.out.println(text);
}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Yylex(java.io.Reader in) {
    this.zzReader = in;
  }


  private static String zzToPrintable(String str) {
    StringBuilder builder = new StringBuilder();
    for (int n = 0 ; n < str.length() ; ) {
      int ch = str.codePointAt(n);
      int charCount = Character.charCount(ch);
      n += charCount;
      if (ch > 31 && ch < 127) {
        builder.append((char)ch);
      } else if (charCount == 1) {
        builder.append(String.format("\\u%04X", ch));
      } else {
        builder.append(String.format("\\U%06X", ch));
      }
    }
    return builder.toString();
  }
  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Yytoken yylex() throws java.io.IOException, ParserException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [140] { T(\"In YYINITIAL but got \" + yytext() + \" switch to S_REQUEST_LINE\");"+ZZ_NL+"                                             yypushback(yylength());"+ZZ_NL+"                                             switchState(S_REQUEST_LINE); }");
            { T("In YYINITIAL but got " + yytext() + " switch to S_REQUEST_LINE");
                                             yypushback(yylength());
                                             switchState(S_REQUEST_LINE);
            }
            // fall through
          case 32: break;
          case 2:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [139] { T(\"Ignore any space in YYINITIAL\"); }");
            { T("Ignore any space in YYINITIAL");
            }
            // fall through
          case 33: break;
          case 3:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [149] { yypushback(yylength()); switchState(S_REQUEST_LINE); }");
            { yypushback(yylength()); switchState(S_REQUEST_LINE);
            }
            // fall through
          case 34: break;
          case 4:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [148] { T(\"Ignore any space in S_REQUEST_SEPARATOR\"); }");
            { T("Ignore any space in S_REQUEST_SEPARATOR");
            }
            // fall through
          case 35: break;
          case 5:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [155] { hasRequestTarget = true; return createTokenTrimmed(TokenType.TYPE_REQUEST_TARGET); }");
            { hasRequestTarget = true; return createTokenTrimmed(TokenType.TYPE_REQUEST_TARGET);
            }
            // fall through
          case 36: break;
          case 6:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [153] { T(\"Ignore {WhiteSpace}+ in S_REQUEST_LINE\"); }");
            { T("Ignore {WhiteSpace}+ in S_REQUEST_LINE");
            }
            // fall through
          case 37: break;
          case 7:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [157] { if (!hasRequestTarget) throwError(); switchState(S_HEADER); }");
            { if (!hasRequestTarget) throwError(); switchState(S_HEADER);
            }
            // fall through
          case 38: break;
          case 8:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [166] { T(\"State S_HEADER fallback for: \" + yytext());"+ZZ_NL+"                                             yypushback(yylength());"+ZZ_NL+"                                             switchState(YYINITIAL); }");
            { T("State S_HEADER fallback for: " + yytext());
                                             yypushback(yylength());
                                             switchState(YYINITIAL);
            }
            // fall through
          case 39: break;
          case 9:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [165] { if (isMultiplePart) switchState(S_MULTILE_PART); else switchState(S_BODY); }");
            { if (isMultiplePart) switchState(S_MULTILE_PART); else switchState(S_BODY);
            }
            // fall through
          case 40: break;
          case 10:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [183] { T(\"State S_BODY falback for: \" + yytext());"+ZZ_NL+"                                             yypushback(yylength());"+ZZ_NL+"                                             switchState(YYINITIAL); }");
            { T("State S_BODY falback for: " + yytext());
                                             yypushback(yylength());
                                             switchState(YYINITIAL);
            }
            // fall through
          case 41: break;
          case 11:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [182] { return createTokenNormal(TokenType.TYPE_BODY_MESSAGE); }");
            { return createTokenNormal(TokenType.TYPE_BODY_MESSAGE);
            }
            // fall through
          case 42: break;
          case 12:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [233] { yypushback(yylength()); switchState(S_SCRIPT_HANDLER); }");
            { yypushback(yylength()); switchState(S_SCRIPT_HANDLER);
            }
            // fall through
          case 43: break;
          case 13:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [238] { T(\"In S_RESPONSE_REFERENCE but got \" + yytext() + \" -> switch to YYINITIAL\"); yypushback(yylength()); switchState(YYINITIAL); }");
            { T("In S_RESPONSE_REFERENCE but got " + yytext() + " -> switch to YYINITIAL"); yypushback(yylength()); switchState(YYINITIAL);
            }
            // fall through
          case 44: break;
          case 14:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [206] { throwError(); }");
            { throwError();
            }
            // fall through
          case 45: break;
          case 15:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [205] { switchState(S_MULTIPLE_PART_BODY); }");
            { switchState(S_MULTIPLE_PART_BODY);
            }
            // fall through
          case 46: break;
          case 16:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [147] { return createTokenNormal(TokenType.TYPE_COMMENT); }");
            { return createTokenNormal(TokenType.TYPE_COMMENT);
            }
            // fall through
          case 47: break;
          case 17:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [162] { return createAndSaveFieldNameToken(TokenType.TYPE_FIELD_NAME); }");
            { return createAndSaveFieldNameToken(TokenType.TYPE_FIELD_NAME);
            }
            // fall through
          case 48: break;
          case 18:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [163] { return createFieldValueToken(); }");
            { return createFieldValueToken();
            }
            // fall through
          case 49: break;
          case 19:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [203] { return createTokenTrimmed(TokenType.TYPE_FIELD_NAME); }");
            { return createTokenTrimmed(TokenType.TYPE_FIELD_NAME);
            }
            // fall through
          case 50: break;
          case 20:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [181] { return createTokenMessageLineFile(); }");
            { return createTokenMessageLineFile();
            }
            // fall through
          case 51: break;
          case 21:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [176] { T(\"State S_BODY but got <>.* => fallback to response reference\");"+ZZ_NL+"                                             yypushback(yylength());"+ZZ_NL+"                                             switchState(S_RESPONSE_REFERENCE); }");
            { T("State S_BODY but got <>.* => fallback to response reference");
                                             yypushback(yylength());
                                             switchState(S_RESPONSE_REFERENCE);
            }
            // fall through
          case 52: break;
          case 22:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [172] { T(\"State S_BODY but got response handler -> switch state to S_SCRIPT_HANDLER\");"+ZZ_NL+"                                             yypushback(yylength());"+ZZ_NL+"                                             switchState(S_SCRIPT_HANDLER); }");
            { T("State S_BODY but got response handler -> switch state to S_SCRIPT_HANDLER");
                                             yypushback(yylength());
                                             switchState(S_SCRIPT_HANDLER);
            }
            // fall through
          case 53: break;
          case 23:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [195] { isNewPartRequired = true; switchState(S_MULTIPLE_PART_HEADER); }");
            { isNewPartRequired = true; switchState(S_MULTIPLE_PART_HEADER);
            }
            // fall through
          case 54: break;
          case 24:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [190] { T(\"State S_BODY_MULTILE_PART but got <>.* => fallback to response reference\");"+ZZ_NL+"                                             yypushback(yylength());"+ZZ_NL+"                                             switchState(S_RESPONSE_REFERENCE); }");
            { T("State S_BODY_MULTILE_PART but got <>.* => fallback to response reference");
                                             yypushback(yylength());
                                             switchState(S_RESPONSE_REFERENCE);
            }
            // fall through
          case 55: break;
          case 25:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [226] { switchState(S_RESPONSE_REFERENCE);"+ZZ_NL+"                                             yypushback(yylength());"+ZZ_NL+"                                             return createTokenNormal(TokenType.TYPE_HANDLER_FILE_SCRIPT); }");
            { switchState(S_RESPONSE_REFERENCE);
                                             yypushback(yylength());
                                             return createTokenNormal(TokenType.TYPE_HANDLER_FILE_SCRIPT);
            }
            // fall through
          case 56: break;
          case 26:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [210] { T(\"State S_BODY but got response handler -> switch state to S_SCRIPT_HANDLER\");"+ZZ_NL+"                                               yypushback(yylength());"+ZZ_NL+"                                               switchState(S_SCRIPT_HANDLER); }");
            { T("State S_BODY but got response handler -> switch state to S_SCRIPT_HANDLER");
                                               yypushback(yylength());
                                               switchState(S_SCRIPT_HANDLER);
            }
            // fall through
          case 57: break;
          case 27:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [133] { reset();"+ZZ_NL+"                                             switchState(S_REQUEST_SEPARATOR);"+ZZ_NL+"                                             return createTokenTrimmed(TokenType.TYPE_SEPARATOR); }");
            { reset();
                                             switchState(S_REQUEST_SEPARATOR);
                                             return createTokenTrimmed(TokenType.TYPE_SEPARATOR);
            }
            // fall through
          case 58: break;
          case 28:
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 10;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length) {
                zzFin = new boolean[zzBufferL.length+1];
              }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos, zzMarkedPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              }
              if (zzFState != -1) {
                zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1);
              }
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 11;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos, zzStartRead);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [154] { return createTokenTrimmed(TokenType.TYPE_REQUEST_METHOD); }");
            { return createTokenTrimmed(TokenType.TYPE_REQUEST_METHOD);
            }
            // fall through
          case 59: break;
          case 29:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [237] { return createTokenNormal(TokenType.TYPE_RESPONSE_REFERENCE); }");
            { return createTokenNormal(TokenType.TYPE_RESPONSE_REFERENCE);
            }
            // fall through
          case 60: break;
          case 30:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [230] { switchState(S_RESPONSE_REFERENCE);"+ZZ_NL+"                                             return createTokenNormal(TokenType.TYPE_HANDLER_EMBEDDED_SCRIPT); }");
            { switchState(S_RESPONSE_REFERENCE);
                                             return createTokenNormal(TokenType.TYPE_HANDLER_EMBEDDED_SCRIPT);
            }
            // fall through
          case 61: break;
          case 31:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [156] { return createTokenTrimmed(TokenType.TYPE_REQUEST_HTTP_VERSION); }");
            { return createTokenTrimmed(TokenType.TYPE_REQUEST_HTTP_VERSION);
            }
            // fall through
          case 62: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java Yylex [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Yylex scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Yylex(reader);
          do {
            System.out.println(scanner.yylex());
          } while (!scanner.zzAtEOF);

        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
