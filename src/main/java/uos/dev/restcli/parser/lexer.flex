package uos.dev.restcli.parser;
%%

%public

%unicode
%state SCRIPT_HANDLER

%{
    // Java code
%}

%yylexthrow ParserException

INPUT_CHARACTER = [^\r\n]
DIGIT = [0-9]
ALPHA = [a-zA-Z]

// Line terminators.
NEW_LINE = \r|\n|\r\n
NEW_LINE_WITH_INTENT = {NEW_LINE}{WHITE_SPACE}+
LINE_TAIL = {INPUT_CHARACTER}*{NEW_LINE}

// White space.
WHITE_SPACE = [ \t\f]
OPTIONAL_WHITE_SPACE = {WHITE_SPACE}*
REQUIRED_WHITE_SPACE = {WHITE_SPACE}+

// Comments.
LINE_COMMENT = (#|\/\/){LINE_TAIL}

// Request separator.
REQUEST_SEPARATOR = ###{LINE_TAIL}

// Request.
METHOD = GET|HEAD|POST|PUT|DELETE|CONNECT|PATCH|OPTIONS|TRACE
HTTP_VERSION = HTTP\/{DIGIT}+\.{DIGIT}+

REQUEST_TARGET = \S+
REQUEST_LINE = ({METHOD}{REQUIRED_WHITE_SPACE})?{REQUEST_TARGET}({REQUIRED_WHITE_SPACE}{HTTP_VERSION})?

FIELD_NAME = [^\r\n:]
FIELD_VALUE = {LINE_TAIL}({NEW_LINE_WITH_INTENT}{FIELD_VALUE})?
HEADER_FIELD = {FIELD_NAME}:{OPTIONAL_WHITE_SPACE}{FIELD_VALUE}{OPTIONAL_WHITE_SPACE}

// Message body.
MESSAGE_LINE_TEXT = !(\r|\n|<|(<>)).*
FILE_PATH = {LINE_TAIL}
MESSAGE_LINE_FILE = <{REQUIRED_WHITE_SPACE}{FILE_PATH}

MULTIPLE_BOUNDARY = --{LINE_TAIL}
// Response handler.
HANDLER_SCRIPT = (!(%}|###).)*
RESPONSE_HANDLER_EMBEDED_OPEN = >{REQUIRED_WHITE_SPACE}{%
RESPONSE_HANDLER_EMBEDED_CLOSE = %}
RESPONSE_HANDLER_SCRIPT = >{REQUIRED_WHITE_SPACE}{FILE_PATH}

// Response reference.
RESPONSE_REFERENCE = <>{REQUIRED_WHITE_SPACE}{FILE_PATH}
%%

<YYINITIAL> {REQUEST_SEPARATOR} { return new Yytoken(Yytoken.TYPE_SEPARATOR, yytext()); }

<SCRIPT_HANDLER> . {}
